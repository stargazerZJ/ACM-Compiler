/*
Test Package: Optim
Author: 18' Zonghan YANG
Time: 2021-04-01
Input:
=== input ===
5 6
1 1 4 5 1 4
1 9 1 9 8 1 0
=== end ===
Output:
=== output ===
1
10
14
51
67
63
115
57
49
33
4
0
=== end ===
ExitCode: 0
RunTimeLimit: 2500000
OutputLengthLimit: 10000
CompileTimeLimit: 30
*/

// NTT, source: https://blog.csdn.net/wu_tongtong/article/details/77620709
class taskNTT {
    int N;
    int mod;
    int[] a, b;
    int n, fn, m; 
    taskNTT () {
        N = 999;
        mod = 998244353;
        a = new int [N];
        b = new int [N];
    } 
    int mulmod(int a, int b, int MOD) {
        int ret = 0;
        a = a % MOD;
        while (b != 0) {
            if ((b & 1) != 0) ret = (ret + a) % MOD;
            b = b >> 1;
            a = a << 1;
            a = a % MOD;
        }
        return ret;
    } 
    int KSM(int a,int b) {
        int t = 1;
        while (b != 0) {
            if ((b & 1) != 0) {
               t= mulmod(t, a, mod);
            }
            b = b >> 1;
            a = mulmod(a, a, mod);
        }
        return t;
    } 
    void reverse(int[] a, int s, int t) {
        while ( s < t ) {
            t--;
            int tmp = a[s];
            a[s] = a[t];
            a[t] = tmp;
            s++;
        }
    } 
    void NTT(int n,int[] a,int opt) {
        int i,j=0,k,l;
        for (i=0;i<n;i++) {
            if (i>j) {
                int tmp = a[i];
                a[i] = a[j];
                a[j] = tmp;
                //swap(a[i],a[j]);
            }
            for (l=n>>1; ;l=l>>1) {
                j = j ^ l;
                if (j>=l) break;
            }
            //for (l=n>>1;(j=j^l)<l;l=l>>1);
        }
        for (i=1;i<n;i=i << 1) {
            int wn=KSM(3,(mod-1)/(i<<1));
            int m=i<<1;
            for (j=0;j<n;j=j+m) {
                int w=1;
                for (k=0;k<i;k++) {
                    int z=mulmod(w, a[j+i+k], mod);
                    a[i+j+k]=(a[j+k]-z+mod)%mod;
                    a[j+k]=(a[j+k]+z)%mod;
                    w=mulmod(w, wn, mod);
                }
            }
        } 
        if (opt==-1) reverse(a,1,n);
    } 
    int main() {
        n=getInt();
        m=getInt();
        //scanf("%d%d",&n,&m);
        int i;
        for (i=0;i<=n;i++) a[i] = getInt(); // scanf("%d",&a[i]);
        for (i=0;i<=m;i++) b[i] = getInt(); // scanf("%d",&b[i]);
        fn=1;
        while (fn<=n+m) fn=fn<<1;
        NTT(fn,a,1); NTT(fn,b,1);
        for (i=0;i<=fn;i++) a[i]=mulmod(a[i], b[i], mod) ;
        NTT(fn,a,-1); 
        int t=KSM(fn,mod-2);
        for (i=0;i<fn;i++) a[i]=mulmod(a[i], t, mod);

        for (i=0;i<=m+n;i++) printlnInt(a[i]); // printf("%d ",a[i]);
        return 0;
    }
};


class taskInline {
    int rng_seed;
    taskInline () {
        rng_seed = 19260817;
    }

    int unsigned_shl(int x, int k) {
        return x << k;
    }
    int unsigned_shr(int x, int k) { // k should be (0, 31)
        int INT_MIN = 1 << 31;
        if (x >= 0) return x >> k;
        else return (1 << (31 - k)) | ((x ^ INT_MIN) >> k);
    }
    int rng() {
        int rng_mask = 1073741823;
        int x = rng_seed;
        x = x ^ unsigned_shl(x, 13);
        x = x ^ unsigned_shr(x, 17);
        x = x ^ unsigned_shl(x, 5);
        rng_seed = x;
        return x & rng_mask;
    }
    int gcd(int x, int y) {
        if (y > 0) return gcd(y, x % y);
        else return x;
    }
    int main() {
        int sum = 0;
        while ((rng() & 255) != (rng() & 255)) {
            sum = sum ^ gcd(rng() + 1, rng() + 1);
        }
        return sum ^ 5647;
    }
};

class taskSSA {
    int n;
    int test() {
        int i, j = n, k;
        for (i = 0; i < j; i++) {
            int t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49;
            t0 = i + 1;
            t1 = t0; t2 = t1; t3 = t2; t4 = t3; t5 = t4; t6 = t5; t7 = t6; t8 = t7; t9 = t8; t10 = t9; t11 = t10; t12 = t11; t13 = t12; t14 = t13; t15 = t14; t16 = t15; t17 = t16; t18 = t17; t19 = t18; t20 = t19; t21 = t20; t22 = t21; t23 = t22; t24 = t23; t25 = t24; t26 = t25; t27 = t26; t28 = t27; t29 = t28; t30 = t29; t31 = t30; t32 = t31; t33 = t32; t34 = t33; t35 = t34; t36 = t35; t37 = t36; t38 = t37; t39 = t38; t40 = t39; t41 = t40; t42 = t41; t43 = t42; t44 = t43; t45 = t44; t46 = t45; t47 = t46; t48 = t47; t49 = t48;
            t1 = t0; t2 = t1; t3 = t2; t4 = t3; t5 = t4; t6 = t5; t7 = t6; t8 = t7; t9 = t8; t10 = t9; t11 = t10; t12 = t11; t13 = t12; t14 = t13; t15 = t14; t16 = t15; t17 = t16; t18 = t17; t19 = t18; t20 = t19; t21 = t20; t22 = t21; t23 = t22; t24 = t23; t25 = t24; t26 = t25; t27 = t26; t28 = t27; t29 = t28; t30 = t29; t31 = t30; t32 = t31; t33 = t32; t34 = t33; t35 = t34; t36 = t35; t37 = t36; t38 = t37; t39 = t38; t40 = t39; t41 = t40; t42 = t41; t43 = t42; t44 = t43; t45 = t44; t46 = t45; t47 = t46; t48 = t47; t49 = t48;
            t1 = t0; t2 = t1; t3 = t2; t4 = t3; t5 = t4; t6 = t5; t7 = t6; t8 = t7; t9 = t8; t10 = t9; t11 = t10; t12 = t11; t13 = t12; t14 = t13; t15 = t14; t16 = t15; t17 = t16; t18 = t17; t19 = t18; t20 = t19; t21 = t20; t22 = t21; t23 = t22; t24 = t23; t25 = t24; t26 = t25; t27 = t26; t28 = t27; t29 = t28; t30 = t29; t31 = t30; t32 = t31; t33 = t32; t34 = t33; t35 = t34; t36 = t35; t37 = t36; t38 = t37; t39 = t38; t40 = t39; t41 = t40; t42 = t41; t43 = t42; t44 = t43; t45 = t44; t46 = t45; t47 = t46; t48 = t47; t49 = t48;
            t1 = t0; t2 = t1; t3 = t2; t4 = t3; t5 = t4; t6 = t5; t7 = t6; t8 = t7; t9 = t8; t10 = t9; t11 = t10; t12 = t11; t13 = t12; t14 = t13; t15 = t14; t16 = t15; t17 = t16; t18 = t17; t19 = t18; t20 = t19; t21 = t20; t22 = t21; t23 = t22; t24 = t23; t25 = t24; t26 = t25; t27 = t26; t28 = t27; t29 = t28; t30 = t29; t31 = t30; t32 = t31; t33 = t32; t34 = t33; t35 = t34; t36 = t35; t37 = t36; t38 = t37; t39 = t38; t40 = t39; t41 = t40; t42 = t41; t43 = t42; t44 = t43; t45 = t44; t46 = t45; t47 = t46; t48 = t47; t49 = t48;
            t1 = t0; t2 = t1; t3 = t2; t4 = t3; t5 = t4; t6 = t5; t7 = t6; t8 = t7; t9 = t8; t10 = t9; t11 = t10; t12 = t11; t13 = t12; t14 = t13; t15 = t14; t16 = t15; t17 = t16; t18 = t17; t19 = t18; t20 = t19; t21 = t20; t22 = t21; t23 = t22; t24 = t23; t25 = t24; t26 = t25; t27 = t26; t28 = t27; t29 = t28; t30 = t29; t31 = t30; t32 = t31; t33 = t32; t34 = t33; t35 = t34; t36 = t35; t37 = t36; t38 = t37; t39 = t38; t40 = t39; t41 = t40; t42 = t41; t43 = t42; t44 = t43; t45 = t44; t46 = t45; t47 = t46; t48 = t47; t49 = t48;
            t1 = t0; t2 = t1; t3 = t2; t4 = t3; t5 = t4; t6 = t5; t7 = t6; t8 = t7; t9 = t8; t10 = t9; t11 = t10; t12 = t11; t13 = t12; t14 = t13; t15 = t14; t16 = t15; t17 = t16; t18 = t17; t19 = t18; t20 = t19; t21 = t20; t22 = t21; t23 = t22; t24 = t23; t25 = t24; t26 = t25; t27 = t26; t28 = t27; t29 = t28; t30 = t29; t31 = t30; t32 = t31; t33 = t32; t34 = t33; t35 = t34; t36 = t35; t37 = t36; t38 = t37; t39 = t38; t40 = t39; t41 = t40; t42 = t41; t43 = t42; t44 = t43; t45 = t44; t46 = t45; t47 = t46; t48 = t47; t49 = t48;
            t1 = t0; t2 = t1; t3 = t2; t4 = t3; t5 = t4; t6 = t5; t7 = t6; t8 = t7; t9 = t8; t10 = t9; t11 = t10; t12 = t11; t13 = t12; t14 = t13; t15 = t14; t16 = t15; t17 = t16; t18 = t17; t19 = t18; t20 = t19; t21 = t20; t22 = t21; t23 = t22; t24 = t23; t25 = t24; t26 = t25; t27 = t26; t28 = t27; t29 = t28; t30 = t29; t31 = t30; t32 = t31; t33 = t32; t34 = t33; t35 = t34; t36 = t35; t37 = t36; t38 = t37; t39 = t38; t40 = t39; t41 = t40; t42 = t41; t43 = t42; t44 = t43; t45 = t44; t46 = t45; t47 = t46; t48 = t47; t49 = t48;
            t1 = t0; t2 = t1; t3 = t2; t4 = t3; t5 = t4; t6 = t5; t7 = t6; t8 = t7; t9 = t8; t10 = t9; t11 = t10; t12 = t11; t13 = t12; t14 = t13; t15 = t14; t16 = t15; t17 = t16; t18 = t17; t19 = t18; t20 = t19; t21 = t20; t22 = t21; t23 = t22; t24 = t23; t25 = t24; t26 = t25; t27 = t26; t28 = t27; t29 = t28; t30 = t29; t31 = t30; t32 = t31; t33 = t32; t34 = t33; t35 = t34; t36 = t35; t37 = t36; t38 = t37; t39 = t38; t40 = t39; t41 = t40; t42 = t41; t43 = t42; t44 = t43; t45 = t44; t46 = t45; t47 = t46; t48 = t47; t49 = t48;
            if (t49 != 0) {
                k = t49;
            }
        }
        return k;
    }
    int main() {
        n = 100;
        int ret = test();
        n = 200;
        return ret + test() - 300;
    }
};

class taskConst {
    int test() {
        int i, j = 0;
        for (i = 0; i < 200; i++) {
            if (((1 ^ 2) == 3) && ((1 & 1) == (5 / 3)) && (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100 == (100 + 1) * 100 / 2)) {
                i++; j++;
            } else {
                j = (1 + 1) / (1 - 1); // sanity check
            }
        }
        return j;
    }
    int main() {
        return test() - 100;
    }
};


int main() {
    taskNTT ntt = new taskNTT(); // normal hard numerical task
    ntt.main();
    taskInline inl = new taskInline();
    if (inl.main() != 0) return -1;
    taskSSA ssa = new taskSSA(); 
    if (ssa.main() != 0) return -1;
    taskConst con = new taskConst(); 
    if (con.main() != 0) return -1;
    return 0;
}
